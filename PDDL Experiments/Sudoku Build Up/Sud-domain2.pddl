(define (domain sudbuildmultiple)
  (:requirements :strips :typing :negative-preconditions)
  (:types
    digit cell row column subgrid - objects
  )

  (:predicates
    (BelongRow ?r - row ?c - cell) ;Indicates that cell ?c belongs to row ?r.
    (UsedRow ?r - row ?num - digit)
    (BelongColumn ?col - column ?c - cell)
    (UsedColumn ?col - column ?num - digit)
    (BelongSubgrid ?s - subgrid ?c - cell)
    (UsedSubgrid ?s - subgrid ?num - digit)
    (empty ?c - cell)
  )
  
  (:action place-one
    :parameters (?c - cell ?r - row ?col - column ?s - subgrid)
    :precondition (and (empty ?c)
                       (BelongRow ?r ?c)
                       (BelongColumn ?col ?c)
                       (BelongSubgrid ?s ?c)
                       (not (UsedRow ?r one))
                       (not (UsedSubgrid ?s one))
                       (not (UsedColumn ?col one)))
    :effect (and (not (empty ?c))
                 (UsedColumn ?col one)
                 (UsedRow ?r one)
                 (UsedSubgrid ?s one))
  )

  (:action place-two
    :parameters (?c - cell ?r - row ?col - column ?s - subgrid)
    :precondition (and (empty ?c)
                       (BelongRow ?r ?c)
                       (BelongColumn ?col ?c)
                       (BelongSubgrid ?s ?c)
                       (not (UsedRow ?r two))
                       (not (UsedSubgrid ?s two))
                       (not (UsedColumn ?col two)))
    :effect (and (not (empty ?c))
                 (UsedColumn ?col two)
                 (UsedRow ?r two)
                 (UsedSubgrid ?s two))
  )

  (:action place-three
    :parameters (?c - cell ?r - row ?col - column ?s - subgrid)
    :precondition (and (empty ?c)
                       (BelongRow ?r ?c)
                       (BelongColumn ?col ?c)
                       (BelongSubgrid ?s ?c)
                       (not (UsedRow ?r three))
                       (not (UsedSubgrid ?s three))
                       (not (UsedColumn ?col three)))
    :effect (and (not (empty ?c))
                 (UsedColumn ?col three)
                 (UsedRow ?r three)
                 (UsedSubgrid ?s three))
  )

  (:action place-four
    :parameters (?c - cell ?r - row ?col - column ?s - subgrid)
    :precondition (and (empty ?c)
                       (BelongRow ?r ?c)
                       (BelongColumn ?col ?c)
                       (BelongSubgrid ?s ?c)
                       (not (UsedRow ?r four))
                       (not (UsedSubgrid ?s four))
                       (not (UsedColumn ?col four)))
    :effect (and (not (empty ?c))
                 (UsedColumn ?col four)
                 (UsedRow ?r four)
                 (UsedSubgrid ?s four))
  )
  
  (:action place-five
    :parameters (?c - cell ?r - row ?col - column ?s - subgrid)
    :precondition (and (empty ?c)
                       (BelongRow ?r ?c)
                       (BelongColumn ?col ?c)
                       (BelongSubgrid ?s ?c)
                       (not (UsedRow ?r five))
                       (not (UsedSubgrid ?s five))
                       (not (UsedColumn ?col five)))
    :effect (and (not (empty ?c))
                 (UsedColumn ?col five)
                 (UsedRow ?r five)
                 (UsedSubgrid ?s five))
  )

  (:action place-six
    :parameters (?c - cell ?r - row ?col - column ?s - subgrid)
    :precondition (and (empty ?c)
                       (BelongRow ?r ?c)
                       (BelongColumn ?col ?c)
                       (BelongSubgrid ?s ?c)
                       (not (UsedRow ?r six))
                       (not (UsedSubgrid ?s six))
                       (not (UsedColumn ?col six)))
    :effect (and (not (empty ?c))
                 (UsedColumn ?col six)
                 (UsedRow ?r six)
                 (UsedSubgrid ?s six))
  )

  (:action place-seven
    :parameters (?c - cell ?r - row ?col - column ?s - subgrid)
    :precondition (and (empty ?c)
                       (BelongRow ?r ?c)
                       (BelongColumn ?col ?c)
                       (BelongSubgrid ?s ?c)
                       (not (UsedRow ?r seven))
                       (not (UsedSubgrid ?s seven))
                       (not (UsedColumn ?col seven)))
    :effect (and (not (empty ?c))
                 (UsedColumn ?col seven)
                 (UsedRow ?r seven)
                 (UsedSubgrid ?s seven))
  )

  (:action place-eight
    :parameters (?c - cell ?r - row ?col - column ?s - subgrid)
    :precondition (and (empty ?c)
                       (BelongRow ?r ?c)
                       (BelongColumn ?col ?c)
                       (BelongSubgrid ?s ?c)
                       (not (UsedRow ?r eight))
                       (not (UsedSubgrid ?s eight))
                       (not (UsedColumn ?col eight)))
    :effect (and (not (empty ?c))
                 (UsedColumn ?col eight)
                 (UsedRow ?r eight)
                 (UsedSubgrid ?s eight))
  )

  (:action place-nine
    :parameters (?c - cell ?r - row ?col - column ?s - subgrid)
    :precondition (and (empty ?c)
                       (BelongRow ?r ?c)
                       (BelongColumn ?col ?c)
                       (BelongSubgrid ?s ?c)
                       (not (UsedRow ?r nine))
                       (not (UsedSubgrid ?s nine))
                       (not (UsedColumn ?col nine)))
    :effect (and (not (empty ?c))
                 (UsedColumn ?col nine)
                 (UsedRow ?r nine)
                 (UsedSubgrid ?s nine))
  )
)